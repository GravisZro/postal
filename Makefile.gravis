ifneq ($(VERBOSE),true)
  QUIET:=@
endif

# compiler options
ifndef CC
CC:=g++
endif

ifndef CPP_STANDARD
  CPP_STANDARD:=-std=c++11
endif

ifndef C_STANDARD
  C_STANDARD:=-std=c11
endif

# set CFLAGS
ifdef FLAGS
  CFLAGS=$(FLAGS)
endif

ifdef DEFINES
  CFLAGS += $(foreach var, $(DEFINES),-D$(var))
else # else use default options
  CFLAGS += -DMULTIPLAYER_REMOVED -DEDITOR_DISABLED -DALLOW_TWINSTICK
endif

# set default values if missing
ifndef BACKEND_SOURCES
  BACKEND_SOURCES = \
	BLUE/Bdebug.cpp \
	BLUE/Bjoy.cpp \
	BLUE/Bkey.cpp \
	BLUE/Bmain.cpp \
	BLUE/Bmouse.cpp \
	BLUE/Btime.cpp \
	BLUE/Bdisp.cpp \
	BLUE/Bsound.cpp \
	CYAN/uDialog.cpp \
	CYAN/uColors.cpp \
	CYAN/uPath.cpp
endif

ifeq (,$(findstring -DLOCALE=,$(CFLAGS)))
  CFLAGS += -DLOCALE=US
endif

ifeq (,$(findstring -DTARGET=,$(CFLAGS)))
  CFLAGS += -DTARGET=POSTAL_2015
endif

# define where to build/install
ifndef INSTALL_PATH
  INSTALL_PATH:=/usr/local
endif

ifndef SOURCE_PATH
  SOURCE_PATH=.
endif

ifndef BUILD_PATH
  BUILD_PATH=$(SOURCE_PATH)/bin
endif

# define what to build
ifndef POSTAL_BINARY
  POSTAL_BINARY=postal
endif

ifdef POSTAL_ARCHFLAGS
  CFLAGS += $(POSTAL_ARCHFLAGS)
endif

ifndef LDFLAGS
  LDFLAGS=-lSDL2
endif

ifndef BACKEND
  BACKEND:=sdl2
endif

SOURCES = \
	AnimThing.cpp \
	ball.cpp \
	barrel.cpp \
	bouy.cpp \
	character.cpp \
	chunk.cpp \
	deathWad.cpp \
	demon.cpp \
	dispenser.cpp \
	doofus.cpp \
	dude.cpp \
	explode.cpp \
	fire.cpp \
	fireball.cpp \
	firebomb.cpp \
	flag.cpp \
	flagbase.cpp \
	grenade.cpp \
	heatseeker.cpp \
	hood.cpp \
	item3d.cpp \
	mine.cpp \
	napalm.cpp \
	navnet.cpp \
	ostrich.cpp \
	person.cpp \
	PowerUp.cpp \
	pylon.cpp \
	rocket.cpp \
	sentry.cpp \
	SndRelay.cpp \
	SoundThing.cpp \
	thing.cpp \
	Thing3d.cpp \
	trigger.cpp \
	warp.cpp \
	weapon.cpp \
	alphablitforpostal.cpp \
	Anim3D.cpp \
	BufQ.cpp \
	bulletFest.cpp \
	camera.cpp \
	crawler.cpp \
	cutscene.cpp \
	encrypt.cpp \
	gameedit.cpp \
	GameSettings.cpp \
	grip.cpp \
	IdBank.cpp \
	InputSettings.cpp \
	InputSettingsDlg.cpp \
	keys.cpp \
	Log.cpp \
	logtab.cpp \
	MemFileFest.cpp \
	MenuSettings.cpp \
	MenuTrans.cpp \
	net.cpp \
	NetBrowse.cpp \
	NetClient.cpp \
	NetDlg.cpp \
	netmsgr.cpp \
	NetServer.cpp \
	organ.cpp \
	Personatorium.cpp \
	ProtoBSDIP.cpp \
	realm.cpp \
	scene.cpp \
	score.cpp \
	settings.cpp \
	smash.cpp \
	socket.cpp \
	StockPile.cpp \
	TexEdit.cpp \
	toolbar.cpp \
	TriggerRegions.cpp \
	update.cpp \
	yatime.cpp \
	aivars.cpp \
	band.cpp \
	credits.cpp \
	game.cpp \
	input.cpp \
	localize.cpp \
	main.cpp \
	menus.cpp \
	play.cpp \
	SampleMaster.cpp \
	title.cpp \
	RSPiX/GREEN/Hot/hot.cpp \
	RSPiX/GREEN/Image/Image.cpp \
	RSPiX/GREEN/Image/ImageCon.cpp \
	RSPiX/GREEN/Image/ImageFile.cpp \
	RSPiX/GREEN/InputEvent/InputEvent.cpp \
	RSPiX/GREEN/Mix/mix.cpp \
	RSPiX/GREEN/Mix/MixBuf.cpp \
	RSPiX/GREEN/Image/Pal.cpp \
	RSPiX/GREEN/Image/PalFile.cpp \
	RSPiX/GREEN/Sample/sample.cpp \
	RSPiX/GREEN/Snd/snd.cpp \
	RSPiX/GREEN/SndFx/SndFx.cpp \
	RSPiX/GREEN/3D/pipeline.cpp \
	RSPiX/GREEN/3D/render.cpp \
	RSPiX/GREEN/3D/types3d.cpp \
	RSPiX/GREEN/3D/zbuffer.cpp \
	RSPiX/GREEN/Blit/AlphaBlit.cpp \
	RSPiX/GREEN/Blit/Blit.cpp \
	RSPiX/GREEN/Blit/BlitInit.cpp \
	RSPiX/GREEN/Blit/BlitT.cpp \
	RSPiX/GREEN/Blit/Cfnt.cpp \
	RSPiX/GREEN/Blit/Fspr1.cpp \
	RSPiX/GREEN/Blit/Fspr8.cpp \
	RSPiX/GREEN/Blit/line.cpp \
	RSPiX/GREEN/Blit/mono.cpp \
	RSPiX/GREEN/Blit/Rotate96.cpp \
	RSPiX/GREEN/Blit/RPrint.cpp \
	RSPiX/GREEN/Blit/ScaleFlat.cpp \
	RSPiX/ORANGE/GameLib/AnimSprite.cpp \
	RSPiX/ORANGE/Attribute/attribute.cpp \
	RSPiX/ORANGE/GUI/btn.cpp \
	RSPiX/ORANGE/Channel/channel.cpp \
	RSPiX/ORANGE/color/colormatch.cpp \
	RSPiX/ORANGE/DirtRect/DirtRect.cpp \
	RSPiX/ORANGE/color/dithermatch.cpp \
	RSPiX/ORANGE/GUI/dlg.cpp \
	RSPiX/ORANGE/GUI/edit.cpp \
	RSPiX/ORANGE/File/file.cpp \
	RSPiX/ORANGE/QuickMath/FixedPoint.cpp \
	RSPiX/ORANGE/GUI/guiItem.cpp \
	RSPiX/ORANGE/IFF/iff.cpp \
	RSPiX/ORANGE/ImageTools/lasso.cpp \
	RSPiX/ORANGE/Laymage/laymage.cpp \
	RSPiX/ORANGE/GUI/ListBox.cpp \
	RSPiX/ORANGE/GUI/ListContents.cpp \
	RSPiX/ORANGE/Meter/meter.cpp \
	RSPiX/ORANGE/MsgBox/MsgBox.cpp \
	RSPiX/ORANGE/GUI/MultiBtn.cpp \
	RSPiX/ORANGE/MultiGrid/MultiGrid.cpp \
	RSPiX/ORANGE/MultiGrid/MultiGridIndirect.cpp \
	RSPiX/ORANGE/GUI/ProcessGui.cpp \
	RSPiX/ORANGE/Debug/profile.cpp \
	RSPiX/ORANGE/GUI/PushBtn.cpp \
	RSPiX/ORANGE/QuickMath/QuickMath.cpp \
	RSPiX/ORANGE/GameLib/Region.cpp \
	RSPiX/ORANGE/RString/rstring.cpp \
	RSPiX/ORANGE/GUI/scrollbar.cpp \
	RSPiX/ORANGE/GameLib/Shapes.cpp \
	RSPiX/ORANGE/Parse/SimpleBatch.cpp \
	RSPiX/ORANGE/GameLib/Sprite.cpp \
	RSPiX/ORANGE/str/str.cpp \
	RSPiX/ORANGE/GUI/txt.cpp \
	WishPiX/Menu/menu.cpp \
	WishPiX/Prefs/prefline.cpp \
	WishPiX/Prefs/prefs.cpp \
	WishPiX/ResourceManager/resmgr.cpp \
	WishPiX/Spry/spry.cpp \
	$(shell echo $(BACKEND_SOURCES) | sed -e "s/\([A-Z]\+\)\/\(\S\+\)/RSPiX\/\1\/$(BACKEND)\/\2/g")

OBJS0 := $(SOURCES:.s=.o)
OBJS1 := $(OBJS0:.c=.o)
OBJS2 := $(OBJS1:.cpp=.o)
OBJS3 := $(OBJS2:.nasm=.o)
OBJS4 := $(OBJS3:.s=.o)
OBJS := $(foreach f,$(OBJS4),$(BUILD_PATH)/$(f))
SOURCES := $(foreach f,$(SOURCES),$(SOURCE_PATH)/$(f))

# !!! FIXME: Get -Wall in here, some day.
CFLAGS += -w -g -fno-builtin -fno-strict-aliasing -fno-operator-names -fno-rtti 

# includes ...
CFLAGS += -I$(SOURCE_PATH)/sys/include
CFLAGS += -I$(SOURCE_PATH)/RSPiX
CFLAGS += -I$(SOURCE_PATH)/WishPiX


.PHONY: all OUTPUT_DIR

nope:
	@echo $(CFLAGS)
	@echo $(SOURCES)

all: debugoff $(POSTAL_BINARY)


debug: debugon $(POSTAL_BINARY)

debugon:
	$(eval CFLAGS += -DDEBUG -D_DEBUG -O0 -g)

debugoff:
	$(eval OPTFLAG := -O3)
	$(eval CFLAGS += -DNDEBUG -D_NDEBUG -O2)

$(BUILD_PATH)/%.o: $(SOURCE_PATH)/%.c
	@echo [Compiling]: $<
	$(QUIET) $(CC) -c -o $@ $< $(C_STANDARD) $(CFLAGS)

$(BUILD_PATH)/%.o: $(SOURCE_PATH)/%.s
	@echo [Assembling]: $<
	$(QUIET) $(CC) $(CPP_STANDARD) $(CFLAGS) -DELF -x assembler-with-cpp -o $@ -c $<

$(BUILD_PATH)/RSPiX/GREEN/Sample/sample.o: $(SOURCE_PATH)/RSPiX/GREEN/Sample/sample.cpp
	@echo [Compiling]: $<
	$(QUIET) $(CC) -c -o $@ $< $(CPP_STANDARD) $(CFLAGS) -fexceptions

$(BUILD_PATH)/main.o: $(SOURCE_PATH)/main.cpp
	@echo [Compiling]: $<
	$(QUIET) $(CC) -c -o $@ $< $(CPP_STANDARD) $(CFLAGS) -fexceptions

$(BUILD_PATH)/%.o: $(SOURCE_PATH)/%.cpp
	@echo [Compiling]: $<
	$(QUIET) $(CC) -c -o $@ $< $(CPP_STANDARD) $(CFLAGS) -fno-exceptions

$(BUILD_PATH)/%.o: $(SOURCE_PATH)/%.c
	@echo [Compiling]: $<
	$(QUIET) $(CC) -c -o $@ $< $(C_STANDARD) $(CFLAGS)

$(BUILD_PATH)/%.a: $(SOURCE_PATH)/%.a
	cp $< $@
	ranlib $@

$(POSTAL_BINARY): OUTPUT_DIR $(OBJS)
	@echo [ Linking ]: $@
	$(QUIET) $(CC) -o $@ $(OBJS) $(LDFLAGS)

OUTPUT_DIR:
	@echo -n "Creating build directories"
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/BLUE/$(BACKEND)
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/CYAN/$(BACKEND)
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/GREEN/Hot
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/GREEN/Image
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/GREEN/InputEvent
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/GREEN/Mix
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/GREEN/Sample
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/GREEN/Snd
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/GREEN/SndFx
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/GREEN/3D
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/GREEN/Blit
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/GameLib
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/Attribute
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/GUI
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/Channel
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/color
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/DirtRect
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/File
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/QuickMath
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/IFF
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/ImageTools
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/Laymage
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/Meter
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/MsgBox
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/MultiGrid
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/Debug
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/RString
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/Parse
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/RSPiX/ORANGE/str
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/WishPiX/Menu
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/WishPiX/Prefs
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/WishPiX/ResourceManager
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/WishPiX/Spry
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/supplemental
	@echo -n "."
	$(QUIET) mkdir -p $(BUILD_PATH)/libs
	@echo " DONE."

clean:
	rm -f $(POSTAL_BINARY)
	rm -rf $(BUILD_PATH)
